!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Arg	webroot/cgi/tcp_client/server.cpp	/^typedef struct Arg{$/;"	s	file:
Arg	webroot/cgi/tcp_client/server.cpp	/^} Arg;$/;"	t	typeref:struct:Arg	file:
BUF_SIZE	webroot/cgi/tcp_client/client.c	12;"	d	file:
BUF_SIZE	webroot/cgi/tcp_client/test.c	12;"	d	file:
BURSIZE	url.h	4;"	d
CreateWorker	webroot/cgi/tcp_client/server.cpp	/^void* CreateWorker(void* ptr )$/;"	f
Date	webroot/cgi/date/date.h	/^        Date(const Date& date)$/;"	f	class:Date
Date	webroot/cgi/date/date.h	/^        Date(int t_year, int t_month, int t_day)$/;"	f	class:Date
Date	webroot/cgi/date/date.h	/^class Date$/;"	c
Date_cal	webroot/cgi/date/date.cpp	/^void Date_cal(char* arg)$/;"	f
Display	webroot/cgi/date/date.h	/^        void Display()$/;"	f	class:Date
GetMonthDay	webroot/cgi/date/date.h	/^        int GetMonthDay(const int& t_year, const int& t_month)$/;"	f	class:Date
MAXSIZE	webroot/cgi/tcp_client/server.cpp	15;"	d	file:
MAX_SIZE	httpServer.h	21;"	d
Mq	webroot/cgi/tcp_client/server.cpp	/^    std::vector<sockid> Mq;$/;"	m	struct:Arg	file:
ProcessRequest	webroot/cgi/tcp_client/server.cpp	/^void ProcessRequest(int client_fd, std::vector<sockid> mq){$/;"	f
ROOT	Makefile	/^ROOT=$(shell pwd)$/;"	m
SERVER_IP	webroot/cgi/tcp_client/client.c	10;"	d	file:
SERVER_IP	webroot/cgi/tcp_client/test.c	10;"	d	file:
SERVER_PORT	webroot/cgi/tcp_client/client.c	11;"	d	file:
SERVER_PORT	webroot/cgi/tcp_client/test.c	11;"	d	file:
SetDate	webroot/cgi/date/date.h	/^        void SetDate(int t_year, int t_month, int t_day)$/;"	f	class:Date
Usage	webroot/cgi/tcp_client/server.cpp	/^void Usage()$/;"	f
addr	webroot/cgi/tcp_client/server.cpp	/^    struct sockaddr_in addr;$/;"	m	struct:Arg	typeref:struct:Arg::sockaddr_in	file:
blank_line	httpServer.h	/^const char* blank_line = "\\r\\n";$/;"	v
client	webroot/cgi/tcp_client/client.c	/^int client(char* arg)$/;"	f
client	webroot/cgi/tcp_client/test.c	/^int client()$/;"	f
client_fd	webroot/cgi/tcp_client/server.cpp	/^    int client_fd;$/;"	m	struct:sockid	file:
dec2hex	url.c	/^char dec2hex(short int c)$/;"	f
echo_error	httpServer.c	/^void echo_error(int sock)$/;"	f
echo_www	httpServer.c	/^int echo_www(int sock, const char* resource_path, int size)$/;"	f
exe_cgi	httpServer.c	/^static int exe_cgi(int sock, char* method, char* resource_path, char* query_string)$/;"	f	file:
fd	webroot/cgi/tcp_client/server.cpp	/^    int fd;$/;"	m	struct:Arg	file:
findSockId	webroot/cgi/tcp_client/server.cpp	/^int findSockId(int id, std::vector<sockid> mq)$/;"	f
get_line	httpServer.c	/^int get_line(int sock, char line[], int size)$/;"	f
getline	webroot/cgi/tcp_client/server.cpp	/^int getline(int client_fd, char* buf, char* source, char* id,  char* directive)$/;"	f
handle_hander	httpServer.c	/^void handle_hander(int sock)$/;"	f
handle_request	httpServer.c	/^static void* handle_request(void* arg)$/;"	f	file:
hex2dec	url.c	/^int hex2dec(char c)$/;"	f
id	webroot/cgi/tcp_client/server.cpp	/^    int id;$/;"	m	struct:sockid	file:
instert_data	webroot/cgi/mysql/insert.c	/^void instert_data(char *name, char *sex, char *phone)$/;"	f
m_day	webroot/cgi/date/date.h	/^        int m_day;$/;"	m	class:Date
m_month	webroot/cgi/date/date.h	/^        int m_month;$/;"	m	class:Date
m_year	webroot/cgi/date/date.h	/^        int m_year;$/;"	m	class:Date
main	httpServer.c	/^int main(int argc, char* argv[])$/;"	f
main	webroot/cgi/cal/cal.c	/^int main()$/;"	f
main	webroot/cgi/cgi.cpp	/^int main()$/;"	f
main	webroot/cgi/date/main.cpp	/^int main()$/;"	f
main	webroot/cgi/mysql/insert.c	/^int main()$/;"	f
main	webroot/cgi/mysql/select.c	/^int main()$/;"	f
main	webroot/cgi/tcp_client/client.c	/^int main()$/;"	f
main	webroot/cgi/tcp_client/server.cpp	/^int main(int argc,char* argv[])$/;"	f
main	webroot/cgi/tcp_client/test.c	/^int main()$/;"	f
my_cal	webroot/cgi/cal/cal.c	/^void my_cal(char* arg)$/;"	f
operator &	webroot/cgi/date/date.h	/^        Date* operator& ()$/;"	f	class:Date
operator +	webroot/cgi/date/date.h	/^        Date operator+ (int days)$/;"	f	class:Date
operator +=	webroot/cgi/date/date.h	/^        Date& operator+= (int days)$/;"	f	class:Date
operator =	webroot/cgi/date/date.h	/^        Date& operator=(const Date& date)$/;"	f	class:Date
operator ==	webroot/cgi/date/date.h	/^        bool operator==(const Date& x)$/;"	f	class:Date
select_data	webroot/cgi/mysql/select.c	/^void select_data()$/;"	f
sockid	webroot/cgi/tcp_client/server.cpp	/^typedef struct sockid{$/;"	s	file:
sockid	webroot/cgi/tcp_client/server.cpp	/^} sockid;$/;"	t	typeref:struct:sockid	file:
startUp	httpServer.c	/^int startUp(int port)$/;"	f
status_line	httpServer.h	/^const char* status_line = "HTTP\/1.0 200 OK\\r\\n";$/;"	v
status_response	httpServer.c	/^void status_response(int sock, int status_code)$/;"	f
urldecode	url.c	/^void urldecode(char url[])$/;"	f
urlencode	url.c	/^void urlencode(char url[])$/;"	f
~Date	webroot/cgi/date/date.h	/^        ~Date()$/;"	f	class:Date
